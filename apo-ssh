#!/bin/sh

# What:
# This script makes Aporeto PAM SSH easy. It will automatically create a keypair if it
# does not already exist. The first time you call it, it will get a token using your
# specified identity provider. Then it will get a certificate using the token. It will
# cache the certificate and token locally. The next time you run it it will check the
# validity of the certificate and if its good will use it. If its expired it will get
# a new certificate and cache it locally. If the token is expired it will try to get a
# new token from your identity provider.

# Installation:
# Put the script on your host. Make sure the execution bit is set with chmod +x
# this_script. Then add an alias to your profile to call this script instead of ssh
# directly. Be sure to configure it.

# Configuration:
# You will need to set the required vars PAM_AUTH_PROVIDER and APOCTL_NAMESPACE.
# You may optionally set the var APOCTL_API

# What is does in a nutshell:

# 1) apoctl auth PROVIDER
# 2) apoctl ssh cert --public-key $PUBLIC_KEY --token $TOKEN --namespace $APOCTL_NAMESPACE > $cert
# 3) chmod 400 $cert
# 4) ssh -i $private_key -i $cert $@

PAM_CACHE_DIR=~/.pamcache
PAM_TOKEN=${PAM_CACHE_DIR}/token
PAM_CERT=${PAM_CACHE_DIR}/cert
PAM_AUTH_PROVIDER=Auth0
APOCTL_NAMESPACE=/somos/dev

SSH_BIN=/usr/bin/ssh

# set -x
DEBUG=0

main() {

  [ -f ~/.ssh/aporeto-ecdsa ] || { 
    _debug "Key ~/.ssh/aporeto-ecdsa does NOT exist, creating"
    ssh-keygen -t ecdsa -f ~/.ssh/aporeto-ecdsa -q -P "" > /dev/null 2>&1 || { err "keygen failed"; return 2; }
  }

  mkdir -p $PAM_CACHE_DIR || { err "Failed to create directory $PAM_CACHE_DIR"; return 2; }
  
  get_token || { err "Failed to get token"; return 3; }
  get_cert || { err "Failed to get cert"; return 3; }

  # Execute the ssh command with any args from the user
  $SSH_BIN -i ~/.ssh/aporeto-ecdsa -i $PAM_CERT $@
}

get_token() {
  _debug "get_token"
  _validate() {
    _debug "_validate"
    [ -f $PAM_TOKEN ] || { _debug "File $PAM_TOKEN does not exist"; return 3; } 
    local token_expire=$(cat $PAM_TOKEN | jwt | jq '.exp')
    [[ $token_expire ]] && {
      local adjusted_time=$(expr $(date +%s) - 600)
      [ $token_expire -gt $adjusted_time ] && {
        _debug "token valid"; return 0
      } || { _debug "token expired"; rm -rf $PAM_TOKEN; return 4; }
    } || { _debug "token invalid"; rm -rf $PAM_TOKEN; return 5; }
  return 0
  }

  _validate && return 0
  [[ $APOCTL_API ]] && {
    apoctl auth $PAM_AUTH_PROVIDER --api $APOCTL_API > $PAM_TOKEN
  } || {
    apoctl auth $PAM_AUTH_PROVIDER > $PAM_TOKEN
  }
  _validate && return 0
  err "Failed to get token"
  return 3
}

get_cert() {
  _debug "get_cert"
  _validate() {
    _debug "_validate"
    [ -f $PAM_TOKEN ] || { _debug "File $PAM_TOKEN does not exist"; return 3; } 
    [ -f $PAM_CERT ] || { _debug "File $PAM_CERT does not exist"; return 3; }
    local valid=$(cat $PAM_CERT | apoctl ssh inspect | grep Valid: | awk '{print $NF}')
    [[ $valid ]] || { _debug "Cert corrupt"; rm -rf $PAM_CERT; return 3;  }
    [[ "${valid:0:1}" == "-" ]] && { _debug "Cert expired"; rm -rf $PAM_CERT; return 4; }
    _debug "cert valid"
    return 0
  }

  _validate && return 0
  rm -rf $PAM_CERT
  apoctl ssh cert --public-key ~/.ssh/aporeto-ecdsa.pub --token $(<$PAM_TOKEN) \
    --namespace $APOCTL_NAMESPACE > $PAM_CERT
  chmod 400 $PAM_CERT
  _validate && return 0
  err "Failed to get cert"
  return 3
}

_debug() { [[ $DEBUG -gt 0 ]] && { err "debug: $@"; }; }
err() { echo "$@" 1>&2; }

main $@
